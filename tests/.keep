"How well do the solution's tools support rich, flexible, comprehensive design and documentation of REST APIs? How cohesively does the solution manage APIs together with their documentation? How do its documentation features support non-REST APIs?"

The API Publisher portal provides a simple editor which can provide API general information(basepath, version, description etc), and resources with parameters. For advanced documentation eg: examples, default values, payload schemas the embedded OpenAPI editor can be used. API Manager supports providing external docs such as inline, markdown documentation and uploading files. The Developer Portal try-it tool shows inline documentation for each resources in APIs. GraphQL try-it tool provides query auto completion.


Categorize docs as How To, Samples & SDK, Public/Support Forum, Other type docs
Different formats of docs : Inline, Markdown, URL, Upload file

Interactive documentation : Swagger UI for REST APIs, GraphQL Interactive docs
Allow to download an SDK with an embedded documentation generated in md format.



"Characterize your solution's out-of-box REST API documentation by providing bullet point lists describing (1) the items specified in API design or policy specs that are automatically carried over into the portal's API documentation (e.g., HTTP methods, URI templates, parameters, security schemes, rate limits, download links, et al) and (2) the structure or major sections of API documentation (e.g., try it, overview, extra pages, et al). It will be to your benefit to specifically highlight items that go beyond what is captured in an OpenAPI spec."


The developer portal contains the try-it tool for REST APIs which will provide an interactive doc by propergating API's 
* HTTP methods
* URI templates
* Parameters
* Description
* Contact info
* Basepath info
* Security schemes
There are
1. Overview - for basic information such as descriptions, base URLs, API definition download
2. Try-it - Interactive documentation
3. Documentation - other documentation such as inline html, pdfs, word docs, markdown etc which are provided by the API Provider


. The API docs are not limited to that. All information of the Resources of the API, including parameters, scopes, etc are available by default on the Swagger UI. Other documentation such as inline html, pdfs, word docs, etc have to be provided by the API producer.


"Provide a bullet point list of mechanisms for customizing and-or extending API documentation, specifically addressing how your solution covers or can cover non-REST APIs (e.g., page templates, extended data fields, templates applied based on tags et al, grouping mechanisms, inclusion of API metadata, extensions to OpenAPI, downloadable assets, arbitrary pages, ways to change structure or navigation [e.g., different ways to display try-it], creation of overarching documentation for a group of APIs, et al).
"
"Provide a bullet point list of mechanisms to facilitate processes and coordination across a variety of API documentation authoring styles and tools (e.g., authoring formats [WYSIWYG, Markdown, et al], staging of updates, single-button synchronized activation of APIs and their documentation, coordinated versioning of APIs and API documentation, coordination across text in an OpenAPI spec and other API documentation text, controlled import of externally authored API documentation [other than OpenAPI content], collaborative authoring by multiple roles, et al).
"
"Describe any other key API documentation features not covered in other line items in this Questionnaire, especially as relates to non-REST APIs.
"
=======================================================

How well do the solution's tools support rich, flexible, comprehensive design and documentation of APIs? How cohesively does the solution manage APIs together with their documentation?

The API Provider portal provides a simple API resource editor which can provide API general descriptions, resources and parameters. For advanced documentation eg: examples, default values, the embedded OpenAPI editor can be used. Additionally, API Manager supports providing external documentation such as separate inline documentation and uploading files. In the store portal try-it tool shows inline documentation for each resources in APIs.



List the elements of an API design that are automatically carried over into the portal's API documentation. If the portal's API documentation is dominantly based on (or similar to) Swagger UI, you may simply so state and then elaborate on any extensions or differences from plain-vanilla Swagger UI.

>> The portal does contain the Swagger UI. The API docs are not limited to that. All information of the Resources of the API, including parameters, scopes, etc are available by default on the Swagger UI. Other documentation such as inline html, pdfs, word docs, etc have to be provided by the API producer.



